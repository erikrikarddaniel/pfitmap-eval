#!/usr/bin/env ruby
#
# = NAME
#
# import_hmmer
#
# = SYNOPSIS
#
# See below, in opt parser block.
#
# = USAGE
#
# See below, in opt parser block.
#
# = AUTHOR
#
# daniel.lundin@scilifelab.se

$VERBOSE = true

require 'optparse'
require 'pg'

@options = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
import_hmmer: Imports hmmer output files.
  Needs all three possible files: NN.hmmout NN.tblout and NN.domtblout

    import_hmmer [options] db NN.hmmout NN.tblout NN.domtblout
BANNER

  opts.on "-h", "--help", "This info"  do 
    puts opts
    exit 0
  end

  opts.on "--profile STRING", "Name of hmm profile" do |v|
    @options[:profile] = v
  end

  opts.on "--ss STRING", "Sequence source encoded like 'ORGANISATION:SOURCE:VERSION'" do |v|
    @options[:ss] = v.split(':')
  end

  opts.on "-v", "--verbose", "Be verbose"  do |v| 
    @options[:verbose] = v 
  end
end
begin
  opt_parser.parse!
  mandatory = [ :profile, :ss ]	# Fill in with mandatory option names (i.e. starting with :)
  missing = mandatory.select { |param| @options[param].nil? }
  unless missing.empty?
    warn "Missing options: #{missing.map { |m| "--#{m}" }.join(", ")}"
    warn opt_parser
    exit 1
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  warn "#{$!}"
  warn opt_parser
  exit 1
end

unless ARGV.length == 4
  warn "I need four non-option arguments: db hmmout tblout domtblout"
  warn opt_parser
  exit 0
end

( db, hmmout, tblout, domtblout ) = ARGV

con = PG.connect( dbname: db )

# Insert the hmm_result row
hmm_result_id = nil
begin
  s = "SELECT * FROM insert_hmm_result('#{@options[:profile]}', '#{@options[:ss].join("','")}');"
  rs = con.exec(s)
  hmm_result_id = rs.getvalue 0, 0
rescue
  warn "Failed to insert sequence_source: #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
  exit 2
end

# Read the tblout file and insert each row
tnameindex = Hash.new	# Will contain a map from tname to id in hmm_result_rows
begin
  io = File.new(tblout)

  # Prepared statements for inserts
  # hmm_result_rows
  con.prepare 'ins_row', <<INS_HRR
SELECT * FROM insert_hmm_result_row(
  #{hmm_result_id}::int, $1::text, $2::text, 
  $3::float, $4::float, $5::float, $6::float, $7, $8, $9, $10, $11, $12, $13
);
INS_HRR

  # seqnames
  con.prepare 'ins_name', <<INS_NAME
SELECT * FROM insert_hmm_result_row_sequence($1, $2::text, $3::text, $4::text, $5::text, $6::text);
INS_NAME

  io.each do |line|
    line.sub!(/\s*#.*/, '')
    next if line =~ /^\s*$/
    fields = line.split(/\s+/)

    # Insert main row
    ( tname, qname ) = fields.values_at(0,2)
    ( e_value, score, bias, dom_n_exp ) = fields.values_at(4, 5, 6, 10).map { |n| n.to_f }
    ( dom_n_reg, dom_n_clu, dom_n_ov, dom_n_env, dom_n_dom, dom_n_rep, dom_n_inc ) = fields[11, 7].map { |n| n.to_i }
    rs = con.exec_prepared 'ins_row', [
      tname, qname, e_value, score, bias,
      dom_n_exp, dom_n_reg, dom_n_clu, dom_n_ov, 
      dom_n_env, dom_n_dom, dom_n_rep, dom_n_inc
    ]
    tnameindex[tname] = rs.getvalue(0, 0)

    # Insert all sequences (i.e. not sequences but names and accnos)
    [ fields[0], fields[18..-1] ].join(' ').split("\x01").each do |n|
      f = n.split(/\s+/)
      fs = f[0].split('|')
      name = f[1..-1].join(' ')
      ( seq_src, gi, accno ) = fs.values_at(2, 1, 3)
      rs = con.exec_prepared 'ins_name', [
	tnameindex[tname], @options[:ss][0], seq_src, gi, accno, name
      ]
    end
  end
rescue
  warn "Failed to process hmmout file '#{hmmout}': #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
end
