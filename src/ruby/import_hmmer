#!/usr/bin/env ruby
#
# = NAME
#
# import_hmmer
#
# = SYNOPSIS
#
# See below, in opt parser block.
#
# = USAGE
#
# See below, in opt parser block.
#
# = AUTHOR
#
# daniel.lundin@scilifelab.se

$VERBOSE = true

require 'optparse'
require 'pg'

N_ROWS_REPORT = 1000

@options = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
import_hmmer: Imports hmmer output files.
  Needs all three possible files: NN.hmmout NN.tblout and NN.domtblout

    import_hmmer [options] db NN.hmmout NN.tblout NN.domtblout
BANNER

  opts.on "-h", "--help", "This info"  do 
    puts opts
    exit 0
  end

  opts.on "--profile STRING", "Name of hmm profile" do |v|
    @options[:profile] = v
  end

  opts.on "--ss STRING", "Sequence source encoded like 'ORGANISATION:SOURCE:VERSION'" do |v|
    @options[:ss] = v.split(':')
  end

  opts.on "-v", "--verbose", "Be verbose"  do |v| 
    @options[:verbose] = v 
  end
end
begin
  opt_parser.parse!
  mandatory = [ :profile, :ss ]	# Fill in with mandatory option names (i.e. starting with :)
  missing = mandatory.select { |param| @options[param].nil? }
  unless missing.empty?
    warn "Missing options: #{missing.map { |m| "--#{m}" }.join(", ")}"
    warn opt_parser
    exit 1
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  warn "#{$!}"
  warn opt_parser
  exit 1
end

unless ARGV.length == 4
  warn "I need four non-option arguments: db hmmout tblout domtblout"
  warn opt_parser
  exit 0
end

( db, hmmout, tblout, domtblout ) = ARGV

con = PG.connect( dbname: db )

# Prepared statements
# hmm_result_rows
con.prepare 'ins_row', <<INS_HRR
SELECT * FROM insert_hmm_result_row(
  $1::int, $2::text, $3::text, 
  $4::float, $5::float, $6::float, $7::float, $8, $9, $10, $11, $12, $13, $14
);
INS_HRR

# seqnames
# hmm_result_row_id, seq_src, accno, name
con.prepare 'ins_name', <<INS_NAME
SELECT * FROM insert_hmm_result_row_sequence(
  $1, $2::text, $3::text, $4::text
);
INS_NAME

# Domain
con.prepare 'ins_domain', <<INS_DOMAIN
SELECT * FROM insert_hmm_result_domain(
  $1, $2, $3, $4, $5, $6::float, $7::float, $8::float, $9::float, $10, $11, $12, $13, $14, $15, $16::float
);
INS_DOMAIN

# Update alignment part of domain
con.prepare 'upd_domali', <<UPD_DOMALI
UPDATE hmm_result_domains
  SET 
    qali = $1::text,
    cali = $2::text,
    tali = $3::text,
    sali = $4::text
  WHERE
    id = $5
;
UPD_DOMALI

tname = nil	# To keep it global for error messages

con.transaction do |con|
  # Insert the hmm_result row
  hmm_result_id = nil
  r = 0

  begin
    s = "SELECT * FROM insert_hmm_result('#{@options[:profile]}', '#{@options[:ss].join("','")}');"
    rs = con.exec(s)
    hmm_result_id = rs.getvalue 0, 0
    warn "Inserted hmm_result #{hmm_result_id}, profile: #{@options[:profile]}, sequence source: #{@options[:ss].join(":")}" if @options[:verbose]
  rescue
    warn "Failed to insert sequence_source: #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
    exit 2
  end

  # Read the tblout file and insert each row
  tnameindex = Hash.new	# Will contain a map from tname to id in hmm_result_rows
  begin
    STDERR.print "Reading tblout file #{tblout}, one '.' per #{N_ROWS_REPORT} lines read." if @options[:verbose]
    io = File.new(tblout)

    io.each do |line|
      r += 1
      STDERR.print "." if @options[:verbose] and r % N_ROWS_REPORT == 0 

      line.sub!(/\s*#.*/, '')
      next if line =~ /^\s*$/
      fields = line.split(/\s+/)

      # Insert main row
      ( tname, qname ) = fields.values_at(0,2)
      ( e_value, score, bias, dom_n_exp ) = fields.values_at(4, 5, 6, 10).map { |n| n.to_f }
      ( dom_n_reg, dom_n_clu, dom_n_ov, dom_n_env, dom_n_dom, dom_n_rep, dom_n_inc ) = fields[11, 7].map { |n| n.to_i }
      rs = con.exec_prepared 'ins_row', [
	  hmm_result_id, tname, qname, e_value, score, bias,
	  dom_n_exp, dom_n_reg, dom_n_clu, dom_n_ov, 
	  dom_n_env, dom_n_dom, dom_n_rep, dom_n_inc
	]
      tnameindex[tname] = { id: rs.getvalue(0, 0).to_i, dom_id: [] }

      # Insert all sequences (i.e. not sequences but names and accnos)
      s = [ fields[0], fields[18..-1] ].join(' ')
      s.split("\x01").each do |n|
	f = n.split(/\s+/)
	accno = f[0]
	name = f[1..-1].join(' ')

	# Can't happen anymore, since seq_src (in reality db) is not there anymore.
	# Keeping in case there are other similiar cases.
###	if seq_src == 'pdb'
###	  if name =~ /Chain\s+([A-Z])/
###	    accno = "#{accno}:#{$1}"
###	  else
###	    warn "PDB entry without chain, possible duplicate entry"
###	  end
###	end

	rs = con.exec_prepared 'ins_name', [
	    tnameindex[tname][:id], @options[:ss][0], accno, name
	  ]
      end
    end
    warn "done" if @options[:verbose]
  rescue
    warn "Failed to process tblout file '#{tblout}', target: '#{tname}': #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
    exit 2
  end

  # Read the domtblout and insert rows with links to tblout rows
  r = 0
  begin
    STDERR.print "Reading domtblout file #{domtblout}, one '.' per #{N_ROWS_REPORT} lines read." if @options[:verbose]
    io = File.new(domtblout)

    io.each do |line|
      r += 1
      STDERR.print "." if @options[:verbose] and r % N_ROWS_REPORT == 0 

      line.sub!(/\s*#.*/, '')
      next if line =~ /^\s*$/

      fields = line.split(/\s+/)
      ( tname, tlen, qlen, i, n ) = fields.values_at(0, 2, 5, 9, 10)
      ( c_e_value, i_e_value, score, bias ) = fields[11..14]
      ( hmm_from, hmm_to, ali_from, ali_to, env_from, env_to, acc ) = fields[15..21]
      rs = con.exec_prepared 'ins_domain', [
	  tnameindex[tname][:id], tlen, qlen, i, n,
	  c_e_value, i_e_value, score, bias,
	  hmm_from, hmm_to, ali_from, ali_to, env_from, env_to, acc 
	]
      tnameindex[tname][:dom_id] << rs.getvalue(0, 0).to_i
    end
    warn "done" if @options[:verbose]
  rescue
    warn "Failed to process domtblout file '#{domtblout}', target: '#{tname}': #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
  end

  # Read the hmmout and insert alignment data
  r = 0
  begin
    STDERR.print "Reading hmmout file #{hmmout}, one '.' per #{N_ROWS_REPORT * 10} lines read." if @options[:verbose]
    io = File.new(hmmout)

    ( tname, tname_next ) = [ nil, nil ]
    domain_n = nil
    ( sindex, slen, read ) = [ nil, nil, false ]
    ( qali, cali, tali, sali ) = [ '', '', '', '' ]
    rn = 0
    io.each do |line|
      r += 1
      STDERR.print "." if @options[:verbose] and r % ( N_ROWS_REPORT * 10 ) == 0 

      line.sub!(/\s*#.*/, '')
      line.chomp!
      next if line =~ /^\s*$/

      #warn "#{__LINE__}: *** #{rn}: #{line} ***"
      if line =~ /^>> +([^ ]+)/
	tname_next = $1
	read = false
      elsif line =~ /^  == domain (\d+)/
	n = $1.to_i
	if tname
	  id = tnameindex[tname][:dom_id][domain_n-1]
	  rs = con.exec_prepared 'upd_domali', [
	      qali, cali, tali, sali, id
	    ]
	end
	tname = tname_next
	domain_n = n
	( sindex, slen ) = [ nil, nil ]
	( qali, cali, tali, sali ) = [ '', '', '', '' ]
	read = true
      elsif line =~ /Internal pipeline statistics summary/
	if tname
	  id = tnameindex[tname][:dom_id][domain_n-1]
	  rs = con.exec_prepared 'upd_domali', [
	      qali, cali, tali, sali, id
	    ]
	end
	tname = tname_next
	tname_next = nil
	domain_n = n
	( sindex, slen ) = [ nil, nil ]
	( qali, cali, tali, sali ) = [ '', '', '', '' ]
      elsif domain_n
	if qali == ''
	  if line =~ /^(\s+\S+\s+\d+ )(\S+) (\d+)\s*$/
	    sindex = $1.length
	    qali = $2
	    slen = qali.length
	  end
	elsif read 
	  if cali.length < qali.length
	    cali += line[sindex, slen]
	  elsif tali.length < cali.length
	    tali += line[sindex, slen]
	  elsif sali.length < tali.length
	    sali += line[sindex, slen]
	  else
	    # Special case for last four lines which are shorter
	    if line[sindex, slen] =~ /(\S+)\s+\d+\s*$/
	      slen = $1.length
	    end
	    qali += line[sindex, slen]
	  end
	end
      end
    end
    warn "done" if @options[:verbose]
  rescue
    warn "Failed to process hmmout file '#{hmmout}', target: '#{tname}': #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
  end
end	# End transaction
