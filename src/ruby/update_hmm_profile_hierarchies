#!/usr/bin/env ruby
#
# = NAME
#
# update_hmm_profile_hierarchies
#
# = SYNOPSIS
#
# See below, in opt parser block.
#
# = USAGE
#
# See below, in opt parser block.
#
# = AUTHOR
#
# daniel.lundin@scilifelab.se

$VERBOSE = true

require 'optparse'
require 'pg'

RANK_INDEX = {
  'superfamily' => 1,
  'family'	=> 2,
  'class'	=> 3,
  'subclass'	=> 4,
  'group'	=> 5
}

@options = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
update_hmm_profile_hierarchies: Makes sure the "flat" hmm_profile_hierarchies table is populated.
    update_hmm_profile_hierarchies [options] db
BANNER

  opts.on "-h", "--help", "This info"  do 
    puts opts
    exit 0
  end

  opts.on "-v", "--verbose", "Be verbose"  do |v| 
    @options[:verbose] = v 
  end
end

begin
  opt_parser.parse!
  mandatory = [ ]	# Fill in with mandatory option names (i.e. starting with :)
  missing = mandatory.select { |param| @options[param].nil? }
  unless missing.empty?
    warn "Missing options: #{missing.map { |m| "--#{m}" }.join(", ")}"
    warn opt_parser
    exit 1
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  warn "#{$!}"
  warn opt_parser
  exit 1
end

unless ARGV.length == 1
  warn "Need a database name"
  warn opt_parser
  exit 0
end

db = ARGV[0]

con = PG.connect( dbname: db )

con.prepare 'insert', <<INSERT
INSERT INTO hmm_profile_hierarchies(
  hmm_profile_id, superfamily, family,
  class, subclass, "group", version
)
VALUES(
  $1::integer, $2::text, $3::text,
  $4::text, $5::text, $6::text, $7::text
);
INSERT

# Loop over records in hmm_profile and reconstruct new records for the
# flat table.
profiles = {}
phierarchies = []

con.transaction do |con|
  # Truncate the current table
  begin
    rs = con.exec("TRUNCATE TABLE hmm_profile_hierarchies;")

    con.exec("SELECT id, name, version, rank, parent_id FROM hmm_profiles;").each do |row|
      profiles[row['id']] = row
    end

    profiles.each_value do |profile|
      warn "Inserting #{profile}" if @options[:verbose]
      insert_row = [ profile['id'], nil, nil, nil, nil, nil, profile['version'] ]
      insert_row[RANK_INDEX[profile['rank']]] = profile['name'] if profile['rank'] and RANK_INDEX[profile['rank']]
      p = profile.clone
      while p['parent_id'] do
	pp = profiles[p['parent_id']]
	#warn "#{__LINE__}: pp: #{pp}"
	insert_row[RANK_INDEX[pp['rank']]] = pp['name'] if pp['rank']
	p = pp
      end

      #warn "#{__LINE__}: insert_row: #{insert_row}"
      con.exec_prepared 'insert', insert_row if insert_row[RANK_INDEX['superfamily']]
    end
  rescue
    warn "Failed to insert rows: #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
    exit 2
  end
end
