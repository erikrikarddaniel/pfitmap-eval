#!/usr/bin/env python
#
# Reads GenBank files and stores in BioSQL database.
#
# daniel.lundin@dbb.su.se
#
# -*- coding: utf-8 -*-

from Bio        import SeqIO
from BioSQL     import BioSeqDatabase
from argparse   import ArgumentParser
from os.path    import basename
from os.path    import splitext

import glob
import os
import re
import sys
import traceback

if __name__=='__main__':
  parser = ArgumentParser(description='Script to store GenBank files in BioSQL database')
  parser.add_argument('dbserver', help='Database server name')
  parser.add_argument('db', help='Database name')
  parser.add_argument('dir', help='Directory to scan for *.gb files')
  parser.add_argument('--verbose', dest='verbose', action='store_true')
  parser.add_argument('--no-verbose', dest='verbose', action='store_false')

  args = parser.parse_args()

if vars(args)['verbose']:
  sys.stderr.write("Reading %s and storing entries in %s/%s\n" % (vars(args)['dir'], vars(args)['dbserver'], vars(args)['db']))

# Connect to db server
server = BioSeqDatabase.open_database(driver='psycopg2', db=vars(args)['dbserver'])

try:
  db = server[vars(args)['db']]

except Exception as e:
  if vars(args)['verbose']:
    sys.stderr.write("Database %s not found, creating\n" % vars(args)['db'])

  db = server.new_database(vars(args)['db'])
  server.commit()
  sys.stderr.write("Created db %s\n" % vars(args)['db'])

# Loop over files
accsplitre = re.compile('(.*)\.(.*)')
for fname in glob.glob("%s/*.gb" % vars(args)['dir']):
  m = accsplitre.match(splitext(basename(fname))[0])

  if vars(args)['verbose']:
    sys.stderr.write("\tHandling %s" % (fname))

  present = False

  try:
    present = db.lookup(accession=m.group(1))

  except Exception as e:
    n=1

  if ( present ):
    if vars(args)['verbose']:
      sys.stderr.write(" already present")

  else:
    if vars(args)['verbose']:
      sys.stderr.write(" inserting")

    try:
      c = db.load(SeqIO.parse(open(fname, 'rU'), 'genbank'))

    except Exception as e:
      sys.stderr.write("\n%s\n" % e)
      sys.stderr.write("\nError: %s\n" % traceback.format_exc())
      exit(2)

  if vars(args)['verbose']:
    sys.stderr.write(".\n")

server.commit()

if vars(args)['verbose']:
  sys.stderr.write("Done\n")
